@{
    ViewData["Title"] = "EmployeeDB";
}
<h1>@ViewData["Title"]</h1>

<h2>Application Overview</h2>

<p>The aim of this application is to develop a full-fledged CRUD (Create, Read, Update, Delete) application utilizing the power of .NET 7.0, ASP.NET Core, and Entity Framework Core for interaction with a PostgreSQL database.</p>

<h3>Technologies Used</h3>

<p>
    - <strong>ASP.NET Core</strong>: It's a free, open-source, high-performance framework for building modern, cloud-based, Internet-connected applications. It is the next generation of ASP.NET, enabling developers to build dynamic, data-driven web applications.<br>

    - <strong>Entity Framework Core</strong>: It is a modern object-relational mapping (ORM) framework that simplifies database interaction in .NET applications. It allows developers to work with databases using strongly-typed .NET objects and LINQ queries.<br>

    - <strong>PostgreSQL</strong>: An advanced, open-source relational database management system known for its reliability, performance, and robust features. It is the chosen database for this application.<br>

    - <strong>.NET 7.0</strong>: This is the latest major release of the .NET platform as of your project's creation. It includes improvements to the runtime, libraries, and ASP.NET Core framework, among other things.<br>
</p>

<h3>Core Features</h3>

<p>
    1. <strong>Create</strong>: The application allows users to create new data entries, which are then inserted into the PostgreSQL database using Entity Framework Core for data access.<br>
    2. <strong>Read</strong>: Users can view existing records from the database. Data fetching happens through Entity Framework Core, presenting the data to the user in a digestible format.<br>
    3. <strong>Update</strong>: The application supports updating existing records. Users can modify the data, which is then updated in the PostgreSQL database using Entity Framework Core.<br>
    4. <strong>Delete</strong>: Users can remove existing entries from the database. This is achieved by removing records from the PostgreSQL database using Entity Framework Core.<br>
</p>

<h3>Application Architecture</h3>

<p>
    The application uses a layered architecture for separation of concerns:<br>

    - The <strong>presentation layer</strong> is built with ASP.NET Core, responsible for handling user interactions, displaying data, and capturing user inputs.<br>

    - The <strong>business logic layer</strong> is designed with .NET 7.0, serving as an intermediary for data exchange between the presentation layer and data access layer. It contains the essential operational logic that handles the data sent to and received from the data access layer.<br>

    - The <strong>data access layer</strong> uses Entity Framework Core to interact with the PostgreSQL database. Entity Framework Core provides an abstraction over database operations, enabling seamless CRUD operations.<br>
</p>

<p>This architecture ensures a clean and scalable structure that is easier to maintain and extend. It allows for the centralization of business logic, easy modification of the database without affecting the presentation layer, and a consistent approach to data access operations.</p>
